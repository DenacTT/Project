//
//  CZAChartView.m
//  CuerLineView
//
//  Created by cza on 15/8/12.
//  Copyright (c) 2015年 cza. All rights reserved.
//

#import "CZAChartView.h"
#import "UIBezierPath+curved.h"
#import "CircleBtn.h"
#import "ReportDataService.h"
#define COUNT 7
#define BTN_WIDTH 7
@interface CZAChartView ()

@property (nonatomic,assign) CGFloat width;

@property (nonatomic,assign) CGFloat firstPointX;

@property (nonatomic,strong) NSMutableArray *grateArr;

@property (nonatomic,assign) CGFloat viewGrate;

@property (nonatomic,strong) UIBezierPath *mainPath;

@property (nonatomic,strong) NSMutableArray *btnArr;

//@property (nonatomic,copy)  NSString *style;

@property (nonatomic,assign) CGFloat change;

@end

@implementation CZAChartView


+ (Class)layerClass{
    return [CAShapeLayer class];
}

-(instancetype)initWithFrame:(CGRect)frame{
    if (self = [super initWithFrame:frame]) {
        self.backgroundColor = [UIColor clearColor];
        _width = (self.frame.size.width-24)/COUNT;
        CGFloat margin ;
//        if (ScreenWidth<=320) {
//            margin = 2.5;
//        }
         margin = 12;
        _firstPointX = _width/2-BTN_WIDTH/2+margin;
        _animationDuration = 1.5;
        _viewGrate = 0.4;
        
        switch ([ReportDataService unit]) {// 1 千克 2 磅 3 斤
            case 1:
//                _style = STR(@"lb_str_kgUnit");
                _change = 1;
                break;
            case 2:
//                _style = STR(@"lb_str_bangUnit");
                _change = bang;
                break;
            case 3:
//                _style = STR(@"lb_str_jinUnit");
                _change = 2;
                break;
                
            default:
                break;
        }
    }
    return self;
}

-(void)drawRect:(CGRect)rect{
    [super drawRect:rect];
        [self setupBg];
    //绘图
    ((CAShapeLayer *)self.layer).fillColor = [UIColor clearColor].CGColor;
    ((CAShapeLayer *)self.layer).strokeColor = RGB(0, 197, 186).CGColor;
    if(_mainPath){
        _mainPath = nil;

    }
    ((CAShapeLayer *)self.layer).path = self.mainPath.CGPath;
    ((CAShapeLayer *)self.layer).lineWidth = 1;
    
    UIButton *lastBtn = [self.btnArr lastObject];
    UIColor *color = RGB(0, 197, 186);
    [color set]; //设置线条颜色
    CGFloat width = 50;
    if (ScreenWidth <= 320) {
        width = 50;
    }
    CGFloat height = 25;
    CGFloat x = lastBtn.center.x-width/2;
    CGFloat y = lastBtn.center.y-height-12;
    
    //画圆矩形
    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(x, y, width, height) byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(3, 3)];
    [path fill];

    //画3角型
    UIBezierPath *threePath = [UIBezierPath bezierPath];
    [threePath moveToPoint:CGPointMake(lastBtn.center.x-5,y+height-1)];
    [threePath addLineToPoint:CGPointMake(lastBtn.center.x+5,y+height-1)];
    [threePath addLineToPoint:CGPointMake(lastBtn.center.x,y+height+4)];
    [threePath closePath];
    [RGB(0, 197, 186)setFill];
    [threePath fill];

    [self creatTipTestWithPoint:CGPointMake(lastBtn.center.x, y+height)rectHeight:height index:self.btnArr.count-1];

    
//    NSInteger index=-1;
//    for (UIButton *btn in self.btnArr) {
//        ++index;
//        UIColor *color = RGB(25, 186, 170);
//        [color set]; //设置线条颜色
//        CGFloat width = 40;
//        CGFloat height = 22;
//        CGFloat x = btn.center.x-width/2;
//        CGFloat y = btn.center.y-height-10;
//        //画圆矩形
//        UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(x, y, width, height) byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(5, 5)];
//        [path fill];
//        
//        //画3角型
//        UIBezierPath *threePath = [UIBezierPath bezierPath];
//        [threePath moveToPoint:CGPointMake(btn.center.x-5,y+height-1)];
//        [threePath addLineToPoint:CGPointMake(btn.center.x+5,y+height-1)];
//        [threePath addLineToPoint:CGPointMake(btn.center.x,y+height+4)];
//        [threePath closePath];
//        [RGB(25, 186, 170)setFill];
//        [threePath fill];
//        //画字
//        [self creatTipTestWithPoint:CGPointMake(btn.center.x, y+height)rectHeight:height index:index];
//    }
    
}

-(void)setupBg{
    
    CGFloat h = self.height/4;
    for (int i = 0 ; i < 5; i++) {
        UIColor *color = [UIColor lightGrayColor];
        [color set]; //设置线条颜色
        UIBezierPath *path = [UIBezierPath bezierPath];
        if(i == 0){
            [path moveToPoint:CGPointMake(1, i*h+1)];
            [path addLineToPoint:CGPointMake(self.frame.size.width, i*h+1)];
        }else if (i == 4){
            [path moveToPoint:CGPointMake(1, i*h-1)];
            [path addLineToPoint:CGPointMake(self.frame.size.width, i*h-1)];
        }else{
            [path moveToPoint:CGPointMake(1, i*h)];
            [path addLineToPoint:CGPointMake(self.frame.size.width  , i*h)];
        }
   
        CGFloat lengths[] = {2,2};
        [path setLineDash:lengths count:1 phase:1];
        [path stroke];
        
    }
    
    for (int i = 0; i<2; i++) {
        UIView *line = [[UIView alloc] initWithFrame:CGRectMake(i*self.frame.size.width, 0, 1, self.height)];
        if(i == 0){
            line.frame = CGRectMake(0, 0, 1, self.frame.size.height);
        }
        [self addSubview:line];
        line.alpha = 0.2;
        line.backgroundColor = [UIColor lightGrayColor];
    }
}

-(void)tipAnimed{
    
}

//画体重字
-(void)creatTipTestWithPoint:(CGPoint)point rectHeight:(CGFloat)rectHeight index:(NSInteger)index{
    CGContextSetRGBStrokeColor(UIGraphicsGetCurrentContext(), 255.0, 255.0, 255.0, 1.0);  //颜色
//    NSString *weightStr = [NSString stringWithFormat:@"%.1f%@",[_values[index] floatValue]*_change,_style] ;
    NSString *weightStr = [NSString stringWithFormat:@"%.1f",[_values[index] floatValue]*_change];
    NSInteger font = 14;
    CGSize strSize = [self boundingRectWithStr:weightStr WithSize:CGSizeMake(MAXFLOAT, MAXFLOAT) withFont:font];
    CGFloat width = strSize.width;
    CGFloat height = strSize.height;
//    NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init] ;
//    style.alignment = NSTextAlignmentCenter;
//
//    NSDictionary *dic = @{NSFontAttributeName : [UIFont systemFontOfSize:font],
//                          NSForegroundColorAttributeName : RGB(255, 255, 255),
//                          NSParagraphStyleAttributeName : style,
//                          };
    CGPoint truePoint ;
    truePoint.x = point.x-width/2;
    truePoint.y = point.y-height/2-rectHeight/2;
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(truePoint.x, truePoint.y, width, height)];
    label.text = weightStr;
    label.textColor = [UIColor whiteColor];
    label.textAlignment = NSTextAlignmentCenter;
    label.backgroundColor = [UIColor clearColor];
    label.font = [UIFont systemFontOfSize:14];
    [self addSubview:label];
//    [weightStr drawAtPoint:truePoint withAttributes:dic];
}

//计算字体size
- (CGSize)boundingRectWithStr:(NSString *)str WithSize:(CGSize)size withFont:(NSInteger)font{
    NSDictionary *attribute = @{NSFontAttributeName: [UIFont systemFontOfSize:font]};
    CGSize retSize = [str boundingRectWithSize:size options:\
                      NSStringDrawingTruncatesLastVisibleLine |
                      NSStringDrawingUsesLineFragmentOrigin |
                      NSStringDrawingUsesFontLeading
                                     attributes:attribute
                                        context:nil].size;
    return retSize;
}

-(UIBezierPath *)mainPath{
    if (!_mainPath) {
        _mainPath = [UIBezierPath bezierPath];
        _btnArr = [NSMutableArray array];
        CGFloat delay = ((CGFloat)self.animationDuration)/_values.count;
        for (int i = 0; i<_values.count; i++) {
            CGPoint point = [self pointAtIndex:i];
            if (i == 0) {
                [_mainPath moveToPoint:point];
            }else{
                [_mainPath addLineToPoint:point];
            }
            CircleBtn *btn;
            if (i == _values.count-1) {
                btn = [[CircleBtn alloc] initWithFrame:CGRectMake(0,0,9,9)];
                
                btn.isSelected = YES;
                [btn setNeedsDisplay];
            }else{
               btn = [[CircleBtn alloc] initWithFrame:CGRectMake(0,0,BTN_WIDTH,BTN_WIDTH)];
            }
           
            [_btnArr addObject:btn];
            btn.center = point;
//            btn.layer.cornerRadius=BTN_WIDTH/2;
//            btn.layer.borderColor = RGB(25, 186, 170).CGColor;
//            btn.layer.borderWidth = 1;
//            btn.clipsToBounds = YES;
//            btn.backgroundColor = [UIColor whiteColor];
            [btn addTarget:self action:@selector(tap) forControlEvents:UIControlEventTouchUpInside];
            if(self.animed){
                btn.transform = CGAffineTransformMakeScale(0,0);
                [self performSelector:@selector(displayPoint:) withObject:btn afterDelay:delay*i];
            }
            [self addSubview:btn];
        }
        
        if (self.curved) {
            _mainPath=[_mainPath smoothedPathWithGranularity:20];
        }
        
        if(self.animed){
            CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"strokeEnd"];
            animation.fromValue = @0;
            animation.toValue = @1;
            animation.duration = self.animationDuration;
            animation.delegate = self;
            [self.layer addAnimation:animation forKey:@"stroke"];
        }
    }
    
    return _mainPath;
}

-(void)tap{
    NSLog(@"caonima");
}

- (void)displayPoint:(UIButton *)button{
    [UIView animateWithDuration:.2 animations:^{
        button.transform = CGAffineTransformMakeScale(1, 1);
    }];
}

- (CGPoint)pointAtIndex:(NSInteger)index{
    CGFloat grate = 1 - [_grateArr[index] floatValue];
    return CGPointMake(_firstPointX+index*_width,grate*self.frame.size.height*_viewGrate+self.frame.size.height*(1-_viewGrate)/2 + self.frame.size.height*0.1/2);
}

//计算百分率
-(void)setValues:(NSArray *)values{
    _values = values;
    CGFloat max = [[values valueForKeyPath:@"@max.floatValue"] floatValue];
    CGFloat min = [[values valueForKeyPath:@"@min.floatValue"] floatValue];
    _grateArr = [NSMutableArray array];
    if(max!=min){
        for(NSNumber *p in values){
            CGFloat val = [p floatValue];
            val = (val-min)/(max - min);
            [_grateArr addObject:@(val)];
        }
    }else{
        for(int i=0;i<values.count ;i++){
            [_grateArr addObject:@(1)];
        }
   
    }

    [self setNeedsDisplay];
}

@end
